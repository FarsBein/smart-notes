import { app, globalShortcut, BrowserWindow, Menu, screen, ipcMain, protocol, session, dialog } from 'electron';
import * as path from 'path';
import * as url from 'url';

import './ipc';

import { productName } from '../../package.json';

import { cleanup as cleanupChromeExtension } from './handlers/chromeExtension';
import { loadConfig } from './config';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const POPUP_WINDOW_WEBPACK_ENTRY: string;
declare const POPUP_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}
export let mainWindow: BrowserWindow | null = null;
const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    title: `${productName} ${app.getVersion()}`,
    minWidth: 550,
    minHeight: 750,
    frame: false,  // This removes the default frame
    titleBarStyle: 'hidden',  // This hides the title bar
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
      spellcheck: true,
      navigateOnDragDrop: false,
      disableHtmlFullscreenWindowResize: true
    }
  });

  if (process.env.NODE_ENV === 'development') {
    session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          'Content-Security-Policy': [
            "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: https: http:;" +
            "img-src 'self' data: https: http: safe-file:;" +
            "connect-src 'self' ws: https: http:;"
          ]
        }
      });
    });
  }

  mainWindow.webContents.openDevTools();

  Menu.setApplicationMenu(null);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Register the global shortcut
  globalShortcut.register('CommandOrControl+Shift+N', () => {
    createPopup();
  });

  // title bar handlers
  ipcMain.on('minimize-window', () => {
    mainWindow?.minimize();
  });

  ipcMain.on('maximize-window', () => {
    if (mainWindow?.isMaximized()) {
      mainWindow.unmaximize();
    } else {
      mainWindow?.maximize();
    }
  });

  ipcMain.on('close-window', () => {
    mainWindow?.close();
  });
};

let popupWindow: BrowserWindow | null = null;
function createPopup() {
  if (popupWindow) {
    popupWindow.focus();
    return;
  }

  const cursor = screen.getCursorScreenPoint();
  const currentDisplay = screen.getDisplayNearestPoint(cursor);

  popupWindow = new BrowserWindow({
    frame: false,
    transparent: true,
    alwaysOnTop: true,
    useContentSize: true,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      nodeIntegrationInWorker: false,
      nodeIntegrationInSubFrames: false,
      preload: POPUP_WINDOW_PRELOAD_WEBPACK_ENTRY,
      sandbox: false,
      spellcheck: true,
      navigateOnDragDrop: false,
      disableHtmlFullscreenWindowResize: true
    },
  });

  popupWindow.webContents.session.setSpellCheckerLanguages(['en-US', 'en-CA']);

  // popupWindow.webContents.openDevTools();

  // Load the correct URL for the popup
  const popupUrl = new URL(MAIN_WINDOW_WEBPACK_ENTRY);
  popupUrl.searchParams.set('view', 'popup');

  // popupWindow.loadURL('http://localhost:3000/popup');
  popupWindow.loadURL(POPUP_WINDOW_WEBPACK_ENTRY + '?view=popup');


  // Set up context menu
  popupWindow.webContents.on('context-menu', (event, params) => {
    const { misspelledWord, dictionarySuggestions } = params;

    // Build a dynamic menu based on the context
    const menuTemplate = [
      ...(misspelledWord ? [
        ...dictionarySuggestions.map(suggestion => ({
          label: suggestion,
          click: () => popupWindow.webContents.replaceMisspelling(suggestion),
        })),
        { type: 'separator' } // This is correctly typed as a separator
      ] : []),
      { role: 'copy' },
      { role: 'paste' },
      { role: 'cut' },
      { role: 'selectAll' }
    ];
    // Build menu from template
    const menu = Menu.buildFromTemplate(menuTemplate as (Electron.MenuItemConstructorOptions | Electron.MenuItem)[]);

    // Popup the menu at the right-click location
    menu.popup({
      window: popupWindow,
      x: params.x, // Get the X coordinate of the click
      y: params.y  // Get the Y coordinate of the click
    });
  });

  // Wait for the window to be ready before showing it
  popupWindow.once('ready-to-show', () => {
    popupWindow.show();
  });

  // Add focus/blur handlers for opacity
  popupWindow.on('focus', () => {
    popupWindow?.setOpacity(1.0);
  });

  popupWindow.on('blur', () => {
    popupWindow?.setOpacity(0.5);
  });

  // Comment out the blur event handler for testing
  /*
  popupWindow.on('blur', () => {
    if (popupWindow) {
      popupWindow.close();
    }
  });
  */
  
  // Handle window closing
  popupWindow.on('closed', () => {
    popupWindow = null;
  });

  // Add after creating popupWindow
  popupWindow.webContents.on('did-fail-load', (event, errorCode, errorDescription) => {
    console.error('Failed to load popup:', errorCode, errorDescription);
  });
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  protocol.registerFileProtocol('safe-file', async (request, callback) => {
    try {
      // Remove safe-file:// and decode the URL
      const requestPath = decodeURIComponent(request.url.slice('safe-file://'.length));
      
      // Convert URL path separators to OS-specific separators
      const filePath = requestPath.split('/').join(path.sep);
      const notesPath = await getNotesPath();
      
      if (filePath.includes('attachments')) {
        // Ensure proper path joining for Windows
        const attachmentsPath = path.join(notesPath, filePath);

        if (require('fs').existsSync(attachmentsPath)) {
          callback({ path: attachmentsPath });
        } else {
          console.error('Attachment not found:', attachmentsPath);
          callback({ error: -6 });
        }
      } else {
        const fullPath = path.join(notesPath, filePath);
        if (require('fs').existsSync(fullPath)) {
          callback({ path: fullPath });
        } else {
          console.error('File not found:', fullPath);
          callback({ error: -6 });
        }
      }
    } catch (error) {
      console.error('Protocol handler error:', {
        error,
        url: request.url
      });
      callback({ error: -2 });
    }
  });

  createWindow();
});

// Helper function to get notes path
async function getNotesPath(): Promise<string> {
  try {
    const config = await loadConfig();
    return config.notesPath;
  } catch (error) {
    console.error('Error loading config:', error);
    return path.join(app.getPath('documents'), 'MyNotes');
  }
}

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  cleanupChromeExtension();
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// ipc operations related to the windows

// Close popup
ipcMain.on('close-popup', () => {
  if (popupWindow) {
    popupWindow.close();
  }
});

// Add this IPC handler to show directory picker
ipcMain.handle('show-directory-picker', async () => {
    const result = await dialog.showOpenDialog(mainWindow, {
        properties: ['openDirectory', 'createDirectory']
    });
    
    if (!result.canceled && result.filePaths.length > 0) {
        return result.filePaths[0];
    }
    return null;
});

// Add after the app initialization
app.on('web-contents-created', (event, contents) => {
  contents.setWindowOpenHandler(({ url }) => {
    // Allow internal webpack entry points
    if (url === MAIN_WINDOW_WEBPACK_ENTRY || 
        url === POPUP_WINDOW_WEBPACK_ENTRY) {
      return { action: 'allow' };
    }
    
    // Open external links in browser
    require('electron').shell.openExternal(url);
    return { action: 'deny' };
  });

  contents.on('will-navigate', (event, url) => {
    // Allow internal webpack entry points
    if (url === MAIN_WINDOW_WEBPACK_ENTRY || 
        url === POPUP_WINDOW_WEBPACK_ENTRY) {
      return;
    }
    
    // Prevent navigation and open external links in browser
    event.preventDefault();
    require('electron').shell.openExternal(url);
  });
});

